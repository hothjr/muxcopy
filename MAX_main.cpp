/***************************************************
  This is a library for the Adafruit PT100/P1000 RTD Sensor w/MAX31865

  Designed specifically to work with the Adafruit RTD Sensor
  ----> https://www.adafruit.com/products/3328

  This sensor uses SPI to communicate, 4 pins are required to
  interface
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  BSD license, all text above must be included in any redistribution
 ****************************************************/

#include "../lib/MUX_Temperature/MUX_Temperature.h"
#include <Wire.h>
#include "Fan.h"
#include "../lib/controller_pins.h"
#include <Adafruit_NeoPixel.h>
#include "EEPROMstorage.h"
#include "StepperErrorHandler.h"
//// new: display
#include <Fonts/FreeMonoBold9pt7b.h>

#include <GxEPD2_3C.h>
GxEPD2_3C<GxEPD2_266c, MAX_HEIGHT(GxEPD2_266c)>
display(GxEPD2_266c(PIN_CS, PIN_DC, PIN_RST, PIN_BUSY));


// 'Divider Line-modified', 78x152px
const unsigned char divider_line [] PROGMEM = {

	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x8f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc7, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf1, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x87, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xf0, 0x7f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 
	0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x80, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xc3, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfe, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf1, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xe3, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x8f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x8f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
	0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc
};

const unsigned char warning_door [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xfe, 0x00, 0x00, 0x7c, 
	0xfc, 0x00, 0x00, 0x7c, 0xf8, 0xfe, 0x00, 0x7c, 0xf9, 0xf8, 0x0e, 0x7c, 0xf9, 0xe0, 0x7e, 0x7c, 
	0xf9, 0xc3, 0xfe, 0x7c, 0xf9, 0xcf, 0xfe, 0x7c, 0xf9, 0xcf, 0xfe, 0x7c, 0xf9, 0xcf, 0xfe, 0x7c, 
	0xf9, 0xcf, 0xfe, 0x7c, 0xf9, 0xcf, 0xfe, 0x7c, 0xf9, 0xcf, 0xfe, 0x7c, 0xf9, 0xcf, 0x7e, 0x7c, 
	0xf9, 0xce, 0x7e, 0x7c, 0xf9, 0xcf, 0xfe, 0x7c, 0xf9, 0xcf, 0xfe, 0x7c, 0xf9, 0xcf, 0xfe, 0x7c, 
	0xf9, 0xcf, 0xfe, 0x7c, 0xf9, 0xcf, 0xfe, 0x7c, 0xf9, 0xcf, 0xf0, 0x7c, 0xfd, 0xcf, 0x80, 0xfc, 
	0xff, 0xcc, 0x07, 0xfc, 0xff, 0xc0, 0x3f, 0xfc, 0xff, 0xe1, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};

const unsigned char network_connected [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xc0, 0x0f, 0xfc, 
	0xff, 0x00, 0x03, 0xfc, 0xfe, 0x03, 0x01, 0xfc, 0xfc, 0x07, 0x80, 0xfc, 0xf8, 0xc7, 0x88, 0x7c, 
	0xf0, 0xcf, 0xce, 0x3c, 0xf1, 0x8f, 0xc6, 0x3c, 0xe3, 0x8f, 0xc7, 0x1c, 0xe3, 0x8f, 0xc7, 0x1c, 
	0xe7, 0x9f, 0xe7, 0x9c, 0xe7, 0x9f, 0xc7, 0x9c, 0xc0, 0x00, 0x00, 0x0c, 0xc0, 0x00, 0x00, 0x0c, 
	0xe7, 0x8f, 0xe7, 0x9c, 0xe7, 0x9f, 0xe7, 0x9c, 0xe3, 0x8f, 0xc7, 0x1c, 0xe3, 0x8f, 0xc7, 0x1c, 
	0xf1, 0x8f, 0xc6, 0x3c, 0xf1, 0xcf, 0xcc, 0x3c, 0xf8, 0x47, 0x8c, 0x7c, 0xfc, 0x07, 0x80, 0xfc, 
	0xfe, 0x03, 0x01, 0xfc, 0xff, 0x00, 0x03, 0xfc, 0xff, 0xc0, 0x0f, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};


// 'icon-base-arrow-modified', 30x30px
const unsigned char base_arrow [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xf9, 0xff, 0xfc, 0xff, 0xf8, 0xff, 0xfc, 
	0xff, 0xf8, 0x7f, 0xfc, 0xff, 0xfc, 0x3f, 0xfc, 0xff, 0xfe, 0x1f, 0xfc, 0xff, 0xfe, 0x1f, 0xfc, 
	0xff, 0xfc, 0x3f, 0xfc, 0xff, 0xf8, 0x7f, 0xfc, 0xff, 0xf8, 0xff, 0xfc, 0xff, 0xf9, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};


// 'icon-base-power-modified', 30x30px
const unsigned char base_power [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 
	0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xf8, 0xfc, 0xfc, 0x7c, 
	0xf0, 0xfc, 0xfe, 0x3c, 0xf1, 0xfc, 0xfe, 0x3c, 0xe3, 0xfc, 0xff, 0x1c, 0xe3, 0xff, 0xff, 0x1c, 
	0xe7, 0xff, 0xff, 0x9c, 0xe7, 0xff, 0xff, 0x9c, 0xc7, 0xff, 0xff, 0x8c, 0xc7, 0xff, 0xff, 0x8c, 
	0xe7, 0xff, 0xff, 0x9c, 0xe7, 0xff, 0xff, 0x9c, 0xe3, 0xff, 0xff, 0x1c, 0xe3, 0xff, 0xff, 0x1c, 
	0xf1, 0xff, 0xfe, 0x3c, 0xf1, 0xff, 0xfc, 0x3c, 0xf8, 0x7f, 0xfc, 0x7c, 0xfc, 0x3f, 0xf0, 0xfc, 
	0xfe, 0x0f, 0xc1, 0xfc, 0xff, 0x00, 0x03, 0xfc, 0xff, 0xc0, 0x0f, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-base-tick-modified', 30x30px
const unsigned char base_tick [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfd, 0xff, 0xfc, 0xff, 0xc0, 0xff, 0xfc, 
	0xff, 0x00, 0xff, 0xfc, 0xfe, 0x0f, 0xff, 0xfc, 0xfc, 0x3f, 0xfe, 0xfc, 0xf8, 0xff, 0xfc, 0x7c, 
	0xf0, 0xff, 0xf8, 0x7c, 0xf1, 0xff, 0xf0, 0xfc, 0xe3, 0xff, 0xe1, 0xfc, 0xe3, 0xff, 0xc3, 0xfc, 
	0xe7, 0xff, 0x87, 0xfc, 0xe7, 0xff, 0x0f, 0xfc, 0xc7, 0xc6, 0x1f, 0x9c, 0xc7, 0xc0, 0x3f, 0x8c, 
	0xe7, 0xe0, 0x7f, 0x9c, 0xe7, 0xf0, 0xff, 0x9c, 0xe3, 0xfb, 0xff, 0x1c, 0xe3, 0xff, 0xff, 0x1c, 
	0xf1, 0xff, 0xfe, 0x3c, 0xf1, 0xff, 0xfc, 0x3c, 0xf8, 0x7f, 0xfc, 0x7c, 0xfc, 0x3f, 0xf0, 0xfc, 
	0xfe, 0x0f, 0xc1, 0xfc, 0xff, 0x00, 0x03, 0xfc, 0xff, 0xc0, 0x0f, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-lighting-off-modified', 30x30px
const unsigned char lighting_off [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xe7, 0xff, 0xff, 0xfc, 0xc3, 0xfc, 0xff, 0xfc, 0xe1, 0xe0, 0x1f, 0xfc, 
	0xf0, 0x80, 0x07, 0xfc, 0xf8, 0x07, 0x83, 0xfc, 0xfc, 0x1f, 0xe3, 0xfc, 0xfe, 0x1f, 0xf1, 0xfc, 
	0xfe, 0x0f, 0xf9, 0xfc, 0xfc, 0x07, 0xf8, 0xfc, 0xfc, 0x43, 0xf8, 0xfc, 0xfc, 0x61, 0xf8, 0xfc, 
	0xfc, 0x70, 0xf8, 0xfc, 0xfe, 0x78, 0x79, 0xfc, 0xfe, 0x3c, 0x31, 0xfc, 0xfe, 0x3e, 0x11, 0xfc, 
	0xff, 0x1f, 0x03, 0xfc, 0xff, 0x1f, 0x83, 0xfc, 0xff, 0x8f, 0xc3, 0xfc, 0xff, 0x8f, 0xc1, 0xfc, 
	0xff, 0xc7, 0x80, 0xfc, 0xff, 0xc0, 0x08, 0x7c, 0xff, 0xc0, 0x0c, 0x3c, 0xff, 0xc0, 0x1e, 0x1c, 
	0xff, 0xff, 0xff, 0x1c, 0xff, 0xff, 0xff, 0x9c, 0xff, 0xc0, 0x0f, 0xfc, 0xff, 0xc0, 0x0f, 0xfc, 
	0xff, 0xe0, 0x1f, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-lighting-on-modified', 30x30px
const unsigned char lighting_on [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0xff, 0xe0, 0x1f, 0xfc, 
	0xff, 0x80, 0x07, 0xfc, 0xff, 0x07, 0x83, 0xfc, 0xff, 0x1f, 0xe3, 0xfc, 0xfe, 0x3f, 0xf1, 0xfc, 
	0xfe, 0x7f, 0xf9, 0xfc, 0xfc, 0x7f, 0xf8, 0xfc, 0xfc, 0x7f, 0xf8, 0xfc, 0xfc, 0x7f, 0xf8, 0xfc, 
	0xfc, 0x7f, 0xf8, 0xfc, 0xfe, 0x7f, 0xf9, 0xfc, 0xfe, 0x3f, 0xf1, 0xfc, 0xfe, 0x3f, 0xf1, 0xfc, 
	0xff, 0x1f, 0xe3, 0xfc, 0xff, 0x1f, 0xe3, 0xfc, 0xff, 0x8f, 0xc7, 0xfc, 0xff, 0x8f, 0xcf, 0xfc, 
	0xff, 0xc7, 0x8f, 0xfc, 0xff, 0xc0, 0x0f, 0xfc, 0xff, 0xc0, 0x0f, 0xfc, 0xff, 0xc0, 0x1f, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xc0, 0x0f, 0xfc, 0xff, 0xc0, 0x0f, 0xfc, 
	0xff, 0xe0, 0x1f, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-mode-eco-modified', 30x30px
const unsigned char mode_eco [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0x00, 0xfc, 0xff, 0xf0, 0x00, 0x7c, 0xff, 0xc0, 0x00, 0x7c, 
	0xff, 0x81, 0xfc, 0x7c, 0xff, 0x0f, 0xfc, 0x7c, 0xfe, 0x1f, 0xfc, 0x7c, 0xfe, 0x3f, 0xfc, 0x7c, 
	0xfc, 0x7f, 0xfc, 0x7c, 0xfc, 0xff, 0xfc, 0xfc, 0xfc, 0xff, 0xfc, 0xfc, 0xf8, 0xfb, 0xf8, 0xfc, 
	0xfc, 0xe1, 0xf8, 0xfc, 0xfc, 0xc3, 0xf9, 0xfc, 0xfc, 0x07, 0xf1, 0xfc, 0xfc, 0x0f, 0xe3, 0xfc, 
	0xfe, 0x1f, 0xc3, 0xfc, 0xfc, 0x0f, 0x07, 0xfc, 0xf8, 0x00, 0x0f, 0xfc, 0xf8, 0xc0, 0x3f, 0xfc, 
	0xf9, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-mode-manual-modified', 30x30px
const unsigned char mode_manual [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xe1, 0xff, 0xfc, 
	0xff, 0xc0, 0xff, 0xfc, 0xff, 0x88, 0xff, 0xfc, 0xff, 0x9c, 0xff, 0xfc, 0xff, 0x9c, 0xff, 0xfc, 
	0xff, 0x9c, 0xff, 0xfc, 0xff, 0x9c, 0xff, 0xfc, 0xff, 0x9c, 0xff, 0xfc, 0xff, 0x9c, 0x1f, 0xfc, 
	0xff, 0x9c, 0x01, 0xfc, 0xff, 0x1f, 0x00, 0xfc, 0xfc, 0x1f, 0xfc, 0xfc, 0xfc, 0x1f, 0xfc, 0x7c, 
	0xf8, 0x9f, 0xfc, 0x7c, 0xf8, 0x9f, 0xfc, 0x7c, 0xf8, 0xff, 0xfc, 0x7c, 0xf8, 0xff, 0xfc, 0x7c, 
	0xf8, 0xff, 0xfc, 0x7c, 0xfc, 0xff, 0xfc, 0x7c, 0xfc, 0x3f, 0xf8, 0xfc, 0xfe, 0x1f, 0xf1, 0xfc, 
	0xff, 0x9f, 0xf3, 0xfc, 0xff, 0x9f, 0xf3, 0xfc, 0xff, 0x9f, 0xf3, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-mode-parameter_run-modified', 30x30px
const unsigned char mode_parameter_run [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xe7, 0xff, 0xff, 0xfc, 0xc7, 0xff, 0xff, 0xfc, 0xc7, 0xff, 0xff, 0xfc, 
	0xc7, 0xff, 0xff, 0x9c, 0xc7, 0xff, 0xfe, 0x1c, 0xc7, 0xff, 0xfc, 0x3c, 0xc7, 0xff, 0xf8, 0x7c, 
	0xc7, 0x87, 0xf0, 0xfc, 0xc7, 0x03, 0xe1, 0xfc, 0xc6, 0x01, 0xc3, 0xfc, 0xc4, 0x30, 0x07, 0xfc, 
	0xc0, 0xf8, 0x1f, 0xfc, 0xc1, 0xfe, 0x3f, 0xfc, 0xc3, 0xff, 0xff, 0xfc, 0xc7, 0xff, 0xff, 0xfc, 
	0xc7, 0xff, 0xff, 0xfc, 0xc7, 0xff, 0xff, 0xfc, 0xc7, 0xff, 0xff, 0xfc, 0xe3, 0xff, 0xff, 0xfc, 
	0xe0, 0x00, 0x00, 0x1c, 0xf0, 0x00, 0x00, 0x1c, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-mode-run-modified', 30x30px
const unsigned char mode_run [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xf8, 0x07, 0xff, 0xfc, 0xe0, 0x00, 0xff, 0x9c, 0xc0, 0x00, 0x00, 0x0c, 
	0xe7, 0xfc, 0x00, 0x1c, 0xff, 0xff, 0x80, 0x7c, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0x3f, 0xff, 0xfc, 0xf0, 0x03, 0xff, 0xfc, 0xe0, 0x00, 0x3f, 0x1c, 0xe3, 0xf0, 0x00, 0x1c, 
	0xff, 0xff, 0x00, 0x3c, 0xff, 0xff, 0xf3, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xf8, 0x07, 0xff, 0xfc, 0xe0, 0x00, 0xff, 0x9c, 0xc0, 0x00, 0x00, 0x0c, 0xe7, 0xfc, 0x00, 0x1c, 
	0xff, 0xff, 0x80, 0x7c, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-mode-sleep-modified', 26x26px
const unsigned char mode_sleep [] PROGMEM = {
	0xff, 0xff, 0xff, 0xc0, 0xff, 0x1f, 0xff, 0xc0, 0xfc, 0x1f, 0xff, 0xc0, 0xf8, 0x1f, 0xff, 0xc0, 
	0xf0, 0x1f, 0xff, 0xc0, 0xe1, 0x1f, 0xff, 0xc0, 0xc3, 0x1f, 0xff, 0xc0, 0xc7, 0x1f, 0xff, 0xc0, 
	0x8f, 0x1f, 0xff, 0xc0, 0x8f, 0x0f, 0xff, 0xc0, 0x8f, 0x8f, 0xff, 0xc0, 0x1f, 0x87, 0xff, 0xc0, 
	0x1f, 0xc3, 0xff, 0xc0, 0x1f, 0xe1, 0xff, 0xc0, 0x1f, 0xf0, 0x7f, 0xc0, 0x8f, 0xf8, 0x00, 0x40, 
	0x8f, 0xfc, 0x00, 0x40, 0x8f, 0xff, 0x00, 0x40, 0xc7, 0xff, 0xf8, 0xc0, 0xc3, 0xff, 0xf0, 0xc0, 
	0xe1, 0xff, 0xe1, 0xc0, 0xf0, 0xff, 0xc3, 0xc0, 0xf8, 0x1e, 0x07, 0xc0, 0xfc, 0x00, 0x0f, 0xc0, 
	0xff, 0x00, 0x3f, 0xc0, 0xff, 0xe1, 0xff, 0xc0
};
// 'icon-network-disconnected', 30x30px
const unsigned char network_disconnected [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xe7, 0xff, 0xff, 0xfc, 
	0xe3, 0xff, 0xff, 0xfc, 0xf1, 0xff, 0xff, 0xfc, 0xf8, 0xff, 0xff, 0xfc, 0xfc, 0x7f, 0xff, 0xfc, 
	0xfe, 0x3f, 0xff, 0xfc, 0xff, 0x1f, 0xff, 0xfc, 0xff, 0x8f, 0xff, 0xfc, 0xff, 0xc7, 0xff, 0xfc, 
	0xff, 0xe3, 0xff, 0xfc, 0xff, 0xf1, 0xff, 0xfc, 0xff, 0xf8, 0xff, 0xfc, 0xff, 0xfc, 0x7f, 0xfc, 
	0xff, 0xfe, 0x3f, 0xfc, 0xff, 0xff, 0x1f, 0xfc, 0xff, 0xff, 0x8f, 0xfc, 0xff, 0xff, 0xc7, 0xfc, 
	0xff, 0xff, 0xe3, 0xfc, 0xff, 0xff, 0xf1, 0xfc, 0xff, 0xff, 0xf8, 0xfc, 0xff, 0xff, 0xfc, 0x7c, 
	0xff, 0xff, 0xfe, 0x3c, 0xff, 0xff, 0xff, 0x1c, 0xff, 0xff, 0xff, 0x9c, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-warning-environment_temp', 30x30px
const unsigned char warning_environment_temp [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xf8, 0x7f, 0xfc, 0xff, 0xe0, 0x1f, 0xfc, 0xff, 0xc3, 0x8f, 0xfc, 0xff, 0x8f, 0xc7, 0xfc, 
	0xff, 0x1f, 0xe3, 0xfc, 0xfe, 0x3f, 0xf1, 0xfc, 0xfc, 0x7f, 0xf8, 0xfc, 0xf8, 0xff, 0xfc, 0x7c, 
	0xf1, 0xff, 0xfe, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 
	0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 
	0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf1, 0xff, 0xfe, 0x3c, 
	0xf8, 0x00, 0x00, 0x7c, 0xfc, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-warning-general', 30x30px
const unsigned char warning_general [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xf8, 0x7f, 0xfc, 0xff, 0xf0, 0x3f, 0xfc, 0xff, 0xf3, 0x1f, 0xfc, 0xff, 0xe7, 0x9f, 0xfc, 
	0xff, 0xc7, 0x8f, 0xfc, 0xff, 0xcf, 0xcf, 0xfc, 0xff, 0x8c, 0xc7, 0xfc, 0xff, 0x9c, 0xe7, 0xfc, 
	0xff, 0x3c, 0xf3, 0xfc, 0xfe, 0x3c, 0xf1, 0xfc, 0xfe, 0x7c, 0xf9, 0xfc, 0xfc, 0x7c, 0xf8, 0xfc, 
	0xfc, 0xfc, 0xfc, 0xfc, 0xf8, 0xff, 0xfc, 0x7c, 0xf9, 0xff, 0xfe, 0x3c, 0xf3, 0xfc, 0xff, 0x3c, 
	0xe3, 0xfc, 0xff, 0x1c, 0xe7, 0xff, 0xff, 0x9c, 0xe7, 0xff, 0xff, 0x9c, 0xe7, 0xff, 0xff, 0x9c, 
	0xe0, 0x00, 0x00, 0x1c, 0xf0, 0x00, 0x00, 0x3c, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-warning-pressure', 30x30px
const unsigned char warning_pressure [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xf0, 0x3f, 0xfc, 0xff, 0x80, 0x0f, 0xfc, 0xff, 0x07, 0xdf, 0xfc, 0xfc, 0x3f, 0xfc, 0xfc, 
	0xfc, 0x7f, 0xf8, 0xfc, 0xf8, 0xff, 0xf1, 0xfc, 0xf1, 0xff, 0xe3, 0xfc, 0xf3, 0xff, 0xc7, 0xfc, 
	0xe3, 0xff, 0x8f, 0x9c, 0xe7, 0xff, 0x1f, 0x9c, 0xe7, 0xfc, 0x3f, 0x9c, 0xe7, 0xf8, 0x7f, 0x9c, 
	0xe7, 0xf8, 0x7f, 0x9c, 0xe7, 0xf8, 0x7f, 0x9c, 0xe7, 0xfc, 0xff, 0x9c, 0xe7, 0xff, 0xff, 0x9c, 
	0xe3, 0xff, 0xff, 0x1c, 0xf3, 0xff, 0xff, 0x3c, 0xf1, 0xff, 0xfe, 0x3c, 0xf8, 0xff, 0xfc, 0x7c, 
	0xfc, 0xff, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};
// 'icon-warning-waterlevel', 30x30px
const unsigned char warning_water_level [] PROGMEM = {
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 
	0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 
	0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 
	0xf3, 0xff, 0xe3, 0x3c, 0xf1, 0xf8, 0x00, 0x3c, 0xf0, 0x00, 0x00, 0x3c, 0xf0, 0x03, 0xff, 0x3c, 
	0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf3, 0xff, 0xff, 0x3c, 0xf1, 0xff, 0xfe, 0x7c, 
	0xf8, 0x00, 0x00, 0x7c, 0xfe, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc, 
	0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xfc
};

//
Adafruit_MAX31865 thermo = Adafruit_MAX31865(CS_PIN);
CD74HC4067 my_mux(S0_PIN, S1_PIN, S2_PIN, S3_PIN);
MUX_Temperature mux_temperature = MUX_Temperature(&thermo, &my_mux);
Fan fan_control0(FAN0_PIN);
Fan fan_control1(FAN1_PIN);
#if (STRIP_24V)
Adafruit_NeoPixel strip = Adafruit_NeoPixel(6, STRIP_DPIN, NEO_WRGB + NEO_KHZ800);
#else
Adafruit_NeoPixel strip = Adafruit_NeoPixel(36, STRIP_DPIN, NEO_GRB + NEO_KHZ800); // NEO_WRGB
#endif
#if (RALPH_STEPPER)
StepperErrorHandler stepperError(STEPPER_PIN, STEPPER_THRESHOLD);
#endif

String SerialBuffer;
char CharBuffer[5];
void serialEvent();
void requestEvent();
void receiveEvent(int len);
String array2msg(double *temperatures);
String array2msg_int(int *temperatures);
double *temperatures;
String message;
String I2Cmsg;
double *flowArray;
String dataWire;
bool stepperErrorRequest = false;

bool checkSensors = false;
bool printSensors = false;

EEPROMstorage eeprom_led;
int LED_r = 0;
int LED_g = 0;
int LED_b = 0;
int LED_w = 0;
int old_LED_r = 28;
int old_LED_g = 58;
int old_LED_b = 44;
int old_LED_w = 0;



void setColor(uint32_t c)
{
  for (uint16_t i = 0; i < strip.numPixels(); i++)
  {
    strip.setPixelColor(i, c);
    strip.show();
  }
}

void setup()
{
  Serial.begin(250000);
  while (!Serial);
 
  
  Serial.println("Adafruit MAX31865 PT100 Sensor Test!");
  // new: display
  display.init();
  Serial.println("Initialization Done!");




//
  // Timer 0 and 1 for hardware PWM
  // Set the PWM frequency for hardware PWM pins (pins 3 and 6)
  // TCA0.SINGLE.CTRLA = 0b00000100; // Enable TCA0, single-slope PWM
  // TCA0.SINGLE.CTRLB = 0b00011000; // Set TCA0 to use 8-bit resolution

  // // Set the prescaler for the PWM frequency
  // TCA0.SINGLE.PER = 104; // Adjust this value to set the desired PWM frequency

  // // Start TCA0 timer
  // TCA0.SINGLE.CTRLA |= 0b00000001; // Start the timer
  // Fan:
  fan_control0.begin();
  fan_control1.begin();

  // I2C:
  Wire.begin(SLAVEI2C_ADRESS);
  Wire.onRequest(requestEvent); // Create an Interrup when Master request data
  Wire.onReceive(receiveEvent); // Create an Interrup when Master request data
  // mux temperature reading:
  mux_temperature.begin();

  // LED
  if (!STRIP_24V)
  {
    pinMode(STRIP_VCC, OUTPUT);
    digitalWrite(STRIP_VCC, HIGH);
  }
  strip.begin();

  LED_r = eeprom_led.read_r();
  LED_g = eeprom_led.read_g();
  LED_b = eeprom_led.read_b();
  LED_w = eeprom_led.read_w();

  if ((LED_r == 0 && LED_g == 0 && LED_b == 0 && LED_w == 0) || (LED_r == 255 && LED_g == 255 && LED_b == 255 && LED_w == 255))
  {
    eeprom_led.store(old_LED_r, old_LED_g, old_LED_b, old_LED_w);
    setColor(strip.Color(old_LED_r, old_LED_g, old_LED_b, old_LED_w));
  }
  else
  {
    setColor(strip.Color(LED_r, LED_g, LED_b, LED_w));
  }
#if (RALPH_STEPPER)
  stepperError.begin();
#endif

}
unsigned long oldOut;
void loop()
{
  mux_temperature.async_ReadAllRTD();
  temperatures = mux_temperature.async_ReadAllTemperatures();

  I2Cmsg = array2msg(temperatures);

#if (RALPH_STEPPER)
  stepperError.readSensor();
#endif

  // Print every second
  if (millis() >= oldOut + 1000L)
  {
    for (size_t i = 0; i < 16; i++)
    {
      Serial.print((String)temperatures[i] + " ");
    }
    Serial.println();
    oldOut = millis();
  }

  if (checkSensors)
  {
    mux_temperature.checkAvailableSensors();
    checkSensors = false;
  }
  // if (printSensors)
  // {
  //   mux_temperature.printAvailableSensors();
  //   // mux_temperature.printI2CAvailableSensors();
  //   I2Cmsg = array2msg_int(mux_temperature.availableSensors, "A");
  //   Wire.write(I2Cmsg.c_str()); // Send ASII String
  //   printSensors = false;
  // }

  if (Serial.available() > 0)
  {
    serialEvent();
  }
}

//drawing text function
void drawtext(int x, int y, const char *text, uint16_t color, const GFXfont *f, int size) {
  display.setCursor(x, y);
  display.setTextColor(color);
  display.setFont(f);
  display.setTextSize(size);
  display.print(text);
}


void PrintMessages()
{
  int16_t tbx, tby;
  uint16_t tbw, tbh;
  display.setRotation(3);
  display.setTextColor(GxEPD_BLACK);
  display.setFullWindow();
  display.firstPage();
  do
  {
    display.fillScreen(GxEPD_BLACK);
    // display.drawInvertedBitmap(8, 8, network_connected, 30, 30, GxEPD_WHITE);
    display.drawInvertedBitmap(220, 0, divider_line, 76, 152, GxEPD_WHITE);
    display.drawInvertedBitmap(8, 8, network_connected, 30, 30, GxEPD_WHITE);
    display.drawInvertedBitmap(8, 114, warning_door, 30, 30, GxEPD_RED);
    display.drawInvertedBitmap(243, 23, mode_eco, 30, 30, GxEPD_WHITE);
    display.drawInvertedBitmap(243, 99, lighting_off, 30, 30, GxEPD_WHITE);
    display.drawInvertedBitmap(266, 23, base_arrow, 30, 30, GxEPD_WHITE);
    display.drawInvertedBitmap(266, 99, base_arrow, 30, 30, GxEPD_WHITE);
    display.drawCircle(166, 42, 8, GxEPD_WHITE);
    drawtext(178, 53, "C", GxEPD_WHITE, NULL, 5);
    drawtext(60, 21, "4", GxEPD_WHITE, NULL, 15);
    // display.setRotation(2);
    // display.drawRoundRect(78, 220, 106, 106, 30, GxEPD_WHITE);
    // display.drawRoundRect(77, 221, 106, 106, 30, GxEPD_WHITE);
    // display.drawRoundRect(76, 222, 106, 106, 30, GxEPD_WHITE);
    // display.drawRoundRect(75, 223, 106, 106, 30, GxEPD_WHITE);
    // display.drawRoundRect(74, 224, 106, 106, 30, GxEPD_WHITE);


    // display.setRotation(3);
    // display.drawRoundRect(220, 74, 106, 106, 30, GxEPD_WHITE);
    // display.drawRoundRect(221, 75, 106, 106, 30, GxEPD_WHITE);
    // display.drawRoundRect(222, 76, 106, 106, 30, GxEPD_WHITE);
    // display.drawRoundRect(223, 77, 106, 106, 30, GxEPD_WHITE);
    // display.drawRoundRect(224, 78, 106, 106, 30, GxEPD_WHITE);







      // display.setCursor(TextCursors[0][0], TextCursors[1][0]);
      // display.print(MSG[0]);
      // display.setCursor(TextCursors[0][1], TextCursors[1][1]);
      // display.print(MSG[1]);
      // display.setCursor(TextCursors[0][2], TextCursors[1][2]);
      // display.print(MSG[2]);
  }
  while(display.nextPage());
}
void receiveEvent(int len)
{
  while (Wire.available() > 0)
  {
    dataWire += (char)Wire.read();
  }
  Serial.println(dataWire);
  float Input = 0;
  char decision = dataWire[0];
  dataWire.remove(0, 1);
  Input = dataWire.toFloat();

  switch (decision)
  {
  case 'A':
    Serial.println("Update TemperatureSensors.");
    checkSensors = true;
    break;
    // case 'P':
    //   printSensors = true;
    //   break;

  case 'R':
    if (Input > 0)
    {
      fan_control0.setPWM(Input);
      fan_control1.setPWM(Input);
    }
    else
    {
      fan_control0.reset();
      fan_control1.reset();
    }
    break;

  // display: new
  case 'D':
    Serial.println("Command D.");
    PrintMessages();
    Serial.println("Printing Done! E-Paper Is Hibernating!");
    display.hibernate();
    Serial.println("bottom d receive event!");

    break;
    
#if (RALPH_STEPPER)
  case 'S':
    stepperErrorRequest = true;
    break;
#endif
  case 'r':
    if (Input == -1)
    {
      eeprom_led.store(old_LED_r, old_LED_g, old_LED_b, old_LED_w);
      setColor(strip.Color(old_LED_r, old_LED_g, old_LED_b, old_LED_w));
    }
    else
    {
      LED_r = (int)Input;
      eeprom_led.store(LED_r, LED_g, LED_b, LED_w);
      setColor(strip.Color(LED_r, LED_g, LED_b, LED_w));
    }
    break;
  case 'g':
    LED_g = (int)Input;
    eeprom_led.store(LED_r, LED_g, LED_b, LED_w);
    setColor(strip.Color(LED_r, LED_g, LED_b, LED_w));
    break;
  case 'b':
    LED_b = (int)Input;
    eeprom_led.store(LED_r, LED_g, LED_b, LED_w);
    setColor(strip.Color(LED_r, LED_g, LED_b, LED_w));
    break;
  case 'w':
    LED_w = (int)Input;
    eeprom_led.store(LED_r, LED_g, LED_b, LED_w);
    setColor(strip.Color(LED_r, LED_g, LED_b, LED_w));
    break;
  default:
    Serial.println("I2C command not recognized.");
    break;
  }
  dataWire = "";
}

void requestEvent()
{
#if (RALPH_STEPPER)
  if (stepperErrorRequest == true)
  {
    Wire.println("S" + (String)stepperError.checkStepperError());
    stepperErrorRequest = false;
  }
  else
    Wire.write(I2Cmsg.c_str()); // Send ASII String
#else
  Wire.write(I2Cmsg.c_str()); // Send ASII String
#endif
}

String array2msg(double *array)
{
  message = "/*";
  for (size_t i = 0; i < 16; i++)
  {
    message.concat(array[i]);
    message.concat(",");
  }
  message.concat("*/");
  return message;
}

String array2msg_int(int *array)
{
  message = "/*";
  for (size_t i = 0; i < 16; i++)
  {
    message += String(array[i]);
    message += ",";
  }
  message += "*/";
  return message;
}

void serialEvent()
{
  float Input = 0;
  SerialBuffer = Serial.readString();
  SerialBuffer.toCharArray(CharBuffer, 5);
  char decision = CharBuffer[0];
  SerialBuffer.remove(0, 1);
  Input = SerialBuffer.toFloat();

  switch (decision)
  {
  case 'A':
    Serial.println("Update TemperatureSensors.");
    checkSensors = true;
    break;
  case 'D':
    Serial.println("Command D.");
    PrintMessages();
    Serial.println("Printing Done! E-Paper Is Hibernating!");
    display.hibernate();
    Serial.println("bottom d serialEvent!");
    break;
  case 'T':
    for (size_t i = 0; i < 16; i++)
    {
      Serial.print((String)temperatures[i] + " ");
    }
    Serial.println();
    break;
  case 'R':
    Serial.println("Set Radiator with Speed: " + (String)Input);
    if (Input > 0)
    {
      fan_control0.setPWM(Input);
      fan_control1.setPWM(Input);
    }
    else
    {
      fan_control0.reset();
      fan_control1.reset();
    }
    break;

  case 'r':
    Serial.println("Set LED r: " + (String)Input);
    if (Input == -1)
    {
      eeprom_led.store(old_LED_r, old_LED_g, old_LED_b, old_LED_w);
      setColor(strip.Color(old_LED_r, old_LED_g, old_LED_b, old_LED_w));
    }
    else
    {
      LED_r = (int)Input;
      eeprom_led.store(LED_r, LED_g, LED_b, LED_w);
      setColor(strip.Color(LED_r, LED_g, LED_b, LED_w));
    }
    break;
  case 'g':
    Serial.println("Set LED g: " + (String)Input);
    LED_g = (int)Input;
    eeprom_led.store(LED_r, LED_g, LED_b, LED_w);
    setColor(strip.Color(LED_r, LED_g, LED_b, LED_w));
    break;
  case 'b':
    Serial.println("Set LED b: " + (String)Input);
    LED_b = (int)Input;
    eeprom_led.store(LED_r, LED_g, LED_b, LED_w);
    setColor(strip.Color(LED_r, LED_g, LED_b, LED_w));
    break;

  case 'w':
    Serial.println("Set LED w: " + (String)Input);
    LED_w = (int)Input;
    eeprom_led.store(LED_r, LED_g, LED_b, LED_w);
    setColor(strip.Color(LED_r, LED_g, LED_b, LED_w));
    break;
  // case 'P':
  //   printSensors = true;
  //   break;
  default:
    Serial.println("unknown Command");
    break;
  }
}